if(x<m)
{
result=c(IncMSEC[0:(x-1),1],0,IncMSEC[(x):(m-1),1])
} else {
result=c(IncMSEC[,1],0)
}
#输出1列,每一行为相对重要性,按照方程变量顺序排序
filename=paste(x,'.csv',sep="")
write.table(result,filename,col.names=F,row.names=F,sep=",")
return(result)
} else {
#离散型随机变量
wt=1/wt
wt=wt/mean(wt)
library(randomForest)
rf=randomForest(tempf,data=data,importance=TRUE,na.action=na.omit,keep.forest=TRUE,classwt=wt,proximity=FALSE,ntree=1000)
rsq=1-rf$err.rate[rf$ntree]
IncMSE=importance(rf,scale=FALSE)[,length(wt)+1]
IncMSE1=subset(IncMSE,IncMSE>0)
IncMSET=importance(rf,scale=TRUE)[,length(wt)+1]
#显著性检验,默认0.05
IncMSEP=2 * pt(abs(IncMSET),df,lower.tail=FALSE)
IncMSEC=cbind(IncMSE/sum(IncMSE1)*rsq,IncMSET,IncMSEP)
IncMSEC[IncMSEC[,3]>0.05,1]=0
if(x<m)
{
result=c(IncMSEC[0:(x-1),1],0,IncMSEC[(x):(m-1),1])
} else {
result=c(IncMSEC[,1],0)
}
#输出1列,每一行为相对重要性,按照方程变量顺序排序
filename=paste(x,'.csv',sep="")
write.table(result,filename,col.names=F,row.names=F,sep=",")
return(result)
}
}
cal(data)
data <- read.csv("nba.csv")
names=colnames(data)
#计算所有变量对于测定变量x的相对重要性
cal=function(x){
tempformula=paste(names[x],"~.",sep="")
tempf <- as.formula(tempformula)
wt=summary(data[,x])
type_indicator=attr(wt,'names')
set.seed(x*5)
if(type_indicator[1] == "Min.")
{
#连续型随机变量
library(randomForest)
#采用随机森林
rf=randomForest(tempf,data=data,importance=TRUE,na.action=na.omit,keep.forest=TRUE,proximity=FALSE,ntree=1000)
TT=predict(rf,data)
yy=sum((data[,x]-TT)^2)
rsq=1-yy/(nrow(data)-1)/var(data[,x])
#rsq = rf$rsq[length(rf$rsq)]
if(rsq<0)rsq=0
IncMSE=importance(rf,scale=FALSE)[,1]
IncMSE1=subset(IncMSE,IncMSE>0)
IncMSET=importance(rf,scale=TRUE)[,1]
#显著性检验,默认0.05
IncMSEP=2 * pt(abs(IncMSET),df,lower.tail=FALSE)
IncMSEC=cbind(IncMSE/sum(IncMSE1)*rsq,IncMSET,IncMSEP)
IncMSEC[IncMSEC[,3]>0.05,1]=0
if(x<m)
{
result=c(IncMSEC[0:(x-1),1],0,IncMSEC[(x):(m-1),1])
} else {
result=c(IncMSEC[,1],0)
}
#输出1列,每一行为相对重要性,按照方程变量顺序排序
filename=paste(x,'.csv',sep="")
write.table(result,filename,col.names=F,row.names=F,sep=",")
return(result)
} else {
#离散型随机变量
wt=1/wt
wt=wt/mean(wt)
library(randomForest)
rf=randomForest(tempf,data=data,importance=TRUE,na.action=na.omit,keep.forest=TRUE,classwt=wt,proximity=FALSE,ntree=1000)
rsq=1-rf$err.rate[rf$ntree]
IncMSE=importance(rf,scale=FALSE)[,length(wt)+1]
IncMSE1=subset(IncMSE,IncMSE>0)
IncMSET=importance(rf,scale=TRUE)[,length(wt)+1]
#显著性检验,默认0.05
IncMSEP=2 * pt(abs(IncMSET),df,lower.tail=FALSE)
IncMSEC=cbind(IncMSE/sum(IncMSE1)*rsq,IncMSET,IncMSEP)
IncMSEC[IncMSEC[,3]>0.05,1]=0
if(x<m)
{
result=c(IncMSEC[0:(x-1),1],0,IncMSEC[(x):(m-1),1])
} else {
result=c(IncMSEC[,1],0)
}
#输出1列,每一行为相对重要性,按照方程变量顺序排序
filename=paste(x,'.csv',sep="")
write.table(result,filename,col.names=F,row.names=F,sep=",")
return(result)
}
}
cal(data)
cal(2)
cal(3)
cal(5)
cal(8)
View(data)
X=3
tempformula=paste(names[x],"~.",sep="")
x=3
tempformula=paste(names[x],"~.",sep="")
tempf <- as.formula(tempformula)
wt=summary(data[,x])
type_indicator=attr(wt,'names')
set.seed(x*5)
if(type_indicator[1] == "Min.")
{
#连续型随机变量
library(randomForest)
#采用随机森林
rf=randomForest(tempf,data=data,importance=TRUE,na.action=na.omit,keep.forest=TRUE,proximity=FALSE,ntree=1000)
TT=predict(rf,data)
yy=sum((data[,x]-TT)^2)
rsq=1-yy/(nrow(data)-1)/var(data[,x])
#rsq = rf$rsq[length(rf$rsq)]
if(rsq<0)rsq=0
IncMSE=importance(rf,scale=FALSE)[,1]
IncMSE1=subset(IncMSE,IncMSE>0)
IncMSET=importance(rf,scale=TRUE)[,1]
#显著性检验,默认0.05
IncMSEP=2 * pt(abs(IncMSET),df,lower.tail=FALSE)
IncMSEC=cbind(IncMSE/sum(IncMSE1)*rsq,IncMSET,IncMSEP)
IncMSEC[IncMSEC[,3]>0.05,1]=0
if(x<m)
{
result=c(IncMSEC[0:(x-1),1],0,IncMSEC[(x):(m-1),1])
} else {
result=c(IncMSEC[,1],0)
}
#输出1列,每一行为相对重要性,按照方程变量顺序排序
filename=paste(x,'.csv',sep="")
write.table(result,filename,col.names=F,row.names=F,sep=",")
return(result)
} else {
#离散型随机变量
wt=1/wt
wt=wt/mean(wt)
library(randomForest)
rf=randomForest(tempf,data=data,importance=TRUE,na.action=na.omit,keep.forest=TRUE,classwt=wt,proximity=FALSE,ntree=1000)
rsq=1-rf$err.rate[rf$ntree]
IncMSE=importance(rf,scale=FALSE)[,length(wt)+1]
IncMSE1=subset(IncMSE,IncMSE>0)
IncMSET=importance(rf,scale=TRUE)[,length(wt)+1]
#显著性检验,默认0.05
IncMSEP=2 * pt(abs(IncMSET),df,lower.tail=FALSE)
IncMSEC=cbind(IncMSE/sum(IncMSE1)*rsq,IncMSET,IncMSEP)
IncMSEC[IncMSEC[,3]>0.05,1]=0
if(x<m)
{
result=c(IncMSEC[0:(x-1),1],0,IncMSEC[(x):(m-1),1])
} else {
result=c(IncMSEC[,1],0)
}
#输出1列,每一行为相对重要性,按照方程变量顺序排序
filename=paste(x,'.csv',sep="")
write.table(result,filename,col.names=F,row.names=F,sep=",")
return(result)
}
### 執行爬蟲之函數
## input parameters:
##   records:樂透的資料筆數
## output data type:
##   ./data/history/********.csv 當天樂透資料
##   ./originData.csv            當天樂透資料，default使用
##   ./originData.txt            當天樂透網站原始資料
executeCrawler49FN <- function(records=nrow(read.csv("originData.csv"))){
system(paste("python lotteryCrawler.py ",records, sep=" "))
}
#####################################################################################
### 讀取檔案
## input parameters:
##    sourceFile:字串，檔案位置，可輸入相對路徑或絕對路徑，目前僅支援csv檔案作為輸入。
## output data type:
##    a data frame，建議命名為originData
readFile49FN <- function(sourceFile="originData.csv"){
# 讀取檔案，必須能分辨檔案類型
# 依照檔案類型，選擇不同的讀檔函數
# 目前僅實作csv
tryCatch({
# 切割字串，抓出最後一個點後的字，當作副檔名判斷
splitSourceName <- unlist(strsplit(sourceFile,"\\."))
fileType <- splitSourceName[length(splitSourceName)]
# 針對該副檔名去判斷，要用何種讀取方式
switch(fileType,
csv={
originData <- read.csv(sourceFile)
print(paste("讀取csv檔案",sourceFile,"成功",sep=" "))
}
)
# 回傳該物件
return(originData)
}, error=function(e){
print("在step01讀取資料出錯")
})
}
##########################################################
### 製作生成計數矩陣之函數
## input parameters:
##    sourceDF:為readFileFN之output，預設該物件名為originData
##    sourceDFRange:讀入的資料範圍(欄)，會將該些資料用來製作計數矩陣
##    records:指定要讀入多少資料列，預設為全部，使用時機為建立Train、test時使用
## output data type:
##    a data Frame 關於各號碼在第1-7次抽球時出現的次數
countMX49FN<- function(sourceDF=originData,sourceDFRange=c(3:9),records=c(1:nrow(originData))){
# 內部變數
#countMX
#splitDataSet
# 先生成一個data.frame，用來放球號，每一次抽球各球號出現的次數
countMX <- data.frame(number=1:49,one=rep(0,49),two=rep(0,49),three=rep(0,49),four=rep(0,49),five=rep(0,49),six=rep(0,49),special=rep(0,49),sum=rep(0,49))
# splitDataSet:生成一份我們所指定欄位與列數的檔案
splitDataSet <- sourceDF[records,]
#
for(j in sourceDFRange){
for(i in splitDataSet[,j]){
countMX[countMX[['number']]==i,j-1]=countMX[countMX[['number']]==i,j-1]+1
}
}
countMX[,9] <- apply(countMX[,2:8],1,sum)
return(countMX)
}
########################################################
### 生成同現矩陣之函數
## input parameters:
##    sourceDF:為readFileFN之output，讀入原始資料，預設為originData
##    records: 資料筆數，預設為全部資料
##    terms: 取第幾次抽球的出現次數，計算同現矩陣，預設為第一次到第七次
## output data type:
##    a matrix 同現矩陣
itemMatrix49FN <- function(sourceDF=originData,records=nrow(sourceDF),terms=c(3:9)){
# 生成一個全為0的49*49矩陣
itemMatrix <- matrix(rep(0,49^2),ncol=49,dimnames=list(1:49,1:49))
# 開始進行計次，將原始資料的每一筆紀錄轉換並記錄至同現矩陣中
for (i in 1:nrow(sourceDF)){
# 取出原始資料的七個中獎號碼
temp <- t(sourceDF[i,terms])
# 對該筆記錄進行排列組合，把所有可能的排列整理出來
temp1x1 <- t(combn(temp,2))
# 針對每一筆紀錄的每一個中獎號碼進行動作
for(j in unique(temp)){
# 挑出 該列名為該中獎號碼的列號
step1 <- which(rownames(itemMatrix)==j)
# 針對列名與行名同為該中獎號碼的值，進行計次加一
itemMatrix[step1,step1]=itemMatrix[step1,step1]+1
# 從先前生成的排列組合內挑出與該中獎號碼做排序的號碼
step2 <- temp1x1[temp1x1[,1]==j,2]
# 找出該做排序的號碼之列號
step3 <- which(rownames(itemMatrix) %in% step2)
# 針對列名為該中獎號碼與行名為作排列號碼的值，進行計次加一
itemMatrix[step1,step3] <- itemMatrix[step1,step3]+1
# 針對列名為作排列號碼與行名為該中獎號碼的值，進行計次加一
itemMatrix[step3,step1] <- itemMatrix[step3,step1]+1
}
}
return(itemMatrix)
}
### 生成部分出現矩陣
## input parameters:
##    inputNumber:輸入欲選取的號碼，預設為1,15,39。
## output parameters:
##    a matrix 部分出現矩陣
partialMatrix49FN <- function(inputNumber=c(1,15,39)){
recommendMatrix <- matrix(rep(0,49))
inputElement <- inputNumber
recommendMatrix[inputElement,1]=recommendMatrix[inputElement,1]+1
return(recommendMatrix)
}
### 製作推薦矩陣
## input parameters:
##    itemMatrix:itemMatrix49FN之output，為同現矩陣
##    recommendMatrix:partialMatrix49FN之output，部分出現矩陣
## output parameters:
##    a matrix 推薦矩陣，得知每一個號碼的推薦分數
recommendMatrix49FN <- function(itemMatrix=itemMatrix49,recommendMatrix=recommendMX49 ){
recommendResult49 <- itemMatrix %*% recommendMatrix
return(recommendResult49)
}
##################################################
### 生成六次機率分布
## input parameters:
##    countMX49Parameter: 接收countMX49FN之output，為每一個號碼的在每一次抽球的歷史出現次數
##    rowSize:            原始資料筆數，計算機率分佈所使用，預設為readFile之output的筆數
## output parameters:
##    a matrix 每一次抽球的機率分布函數
pbDistributionMX49FN <- function(countMX49Parameter=countMX49,rowSize=nrow(originData)){
pbDistributionMX <- matrix(,nrow=49,ncol=8,dimnames=list(1:49,1:8))
for(i in 2:9){
pbDistributionMX[,i-1] <- countMX49Parameter [,i]/rowSize
}
return(pbDistributionMX)
}
###########################################################################
### 抽球函數chooseBall
## input parameters:
##    times: 要模擬的第n次抽球，預設為模擬第一次到第六次抽球c(1:6)
##    probMatrix: 接收pbDistributionMX49FN所output之矩陣，用來當作機率分配的matrix，預設為先前所生成的機率分布矩陣
## output Type:
##    a numeric vector
chooseBall49FN <- function(times=c(1:6),probMatrix49=pbDistributionMX49){
## 生成一條向量準備紀錄所抽的球號
record <- c()
## 生成49顆球號
ball <- 1:49
## 抽球
for(i in times){
# 開駛模擬抽球，並將所抽的球放入紀錄向量record內
# 先判斷是否為第一次模擬抽球，若為否，則進行if內的動作(如此可增進效能)
if(times[1]!=i){
record <- c(record,sample(ball,1,prob=probMatrix49[-record,i]))
}else{
record <- c(record,sample(ball,1,prob=probMatrix49[,i]))
}
# 去除ball向量中已被抽取出的球號
ball  <- ball[! ball %in% record]
}
# 傳回record向量
return(record)
}
#######################################################
### 找出推薦組合
## input parameters:
##    recommendResult:recommendResultFN49之output，為各號碼之推薦分數
##    score:分數下限，用來過濾recommendResult之用
##    reserve:選擇單次抽號模式時，需輸入球號。
## output parameters:
##    a data frame 欄位一是球號 欄位二是推薦分數
recommendResultFN49 <- function(recommendResult=recommendResult49,score=100,reserve=NULL){
if(length(which(recommendResult[,1]>score))<6){
# 重新輸入部分矩陣
# 同現矩陣與部分矩陣相內積
# 重新呼叫此function，進行判斷
recommendMX49 <<- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
recommendResult49 <<- recommendMatrix49FN()
print("重新抽球")
#print(score)
recommendResultFN49(recommendResult49,score=score)
}else if(length(reserve)!=0){
# 返回結果必須是六個數字及推薦分數
# 返回的結果必須包含保留數字
step1AddColumnNumber <- as.matrix(data.frame(Number=rownames(recommendResult),Score=recommendResult[,1]))
step2SortScore <- as.matrix(sort(step1AddColumnNumber[,2],decreasing = T))
#View(step2SortScore)
step3Extract <- step2SortScore[rownames(step2SortScore) %in% reserve,]
#print(rownames(step2SortScore) %in% reserve)
#View(step3Extract)
step4GetOther <- step2SortScore[!(rownames(step2SortScore) %in% reserve),]
#View(step4GetOther)
tempValue <- 6-length(reserve)
#print(tempValue)
step5Bind <- c(step3Extract,step4GetOther[1:tempValue])
#View(step5Bind)
#print(as.data.frame(step5Bind))
step5Bind <- as.matrix(step5Bind)
step6Result <- data.frame(Number=rownames(step5Bind),Score=step5Bind[,1])
return(step6Result)
}else{
# 取出前六個推薦分數高的號碼
step1AddColumnNumber <- as.matrix(data.frame(Number=rownames(recommendResult),Score=recommendResult[,1]))
step2SortScore <- as.matrix(sort(step1AddColumnNumber[,2],decreasing = T))
result <- data.frame(Number=rownames(step2SortScore)[1:6],Score=step2SortScore[1:6])
return(result)
}
}
####################################################################
### 驗證(取出歷史紀錄內，只要有一顆球號在目標組合內，即挑揀出)
## input parameters:
##    examineResult: 為recommendResultFN49之output，一個兩欄的dataFrame，欄位一為球號，欄位二為推薦分數
##    sourceDF:      為readFile49FN之output，預設為originData
## output parameters:
##    a number vector 該些紀錄之編號
historyRecordFN49<- function(examineResult=finalResult[['Number']],sourceDF=originData){
chooseResult <- examineResult
reserveNumber <- c()
realResult <- sourceDF[,3:9]
for(i in 1:nrow(sourceDF)){
tempForCompare<- as.vector(realResult[i,])
if(any(chooseResult %in% tempForCompare)){
reserveNumber <- c(reserveNumber,i)
}
}
return(reserveNumber)
}
### 第二次驗證
## input parameters:
##    examineResult: 為recommendResultFN49之output，一個兩欄的dataFrame，欄位一為球號，欄位二為推薦分數
##    historyRecord  為historyRecordFN49之output，一條歷史紀錄有出現推薦組合之向量，內為資料的編號
##    sourceDF:      為readFile49FN之output，預設為originData
## output parameters:
##    a numeric vector 此條向量內存的是推薦組合在歷史紀錄內有中獎的紀錄編號
historyRecordCombo3FN49 <- function(examineResult=finalResult[['Number']],historyRecord=historyRecord49,sourceDF=originData){
chooseResult <- examineResult
combinationChoose3 <- t(combn(chooseResult,3))
reserveNumber2 <- c()
for(j in 1:nrow(combinationChoose3)){
test <- as.vector(combinationChoose3[j,] )
for(i in 1:nrow(sourceDF)){
tempForCompare<- as.vector(sourceDF[i,])
if(all(test %in% tempForCompare)){
reserveNumber2 <- c(reserveNumber2,i)
}
}
}
return(reserveNumber2)
}
### 按現實情況的機率分布，隨機抽六個號碼，並與過去歷史紀錄作驗證
temp2_1 <- chooseBall49FN()
temp2_2 <- historyRecordFN49(examineResult = temp2_1)
temp2_3 <- historyRecordCombo3FN49(examineResult = temp2_1,historyRecord = temp2_2)
######################################################
### 重新生成部分矩陣，內積生成推薦矩陣
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_4 <- historyRecordFN49(examineResult = temp3_3[,1])
temp3_5 <- historyRecordCombo3FN49(examineResult = temp3_3[,1],historyRecord = temp3_4 )
tryCatch({
if(!exists("originData")){
originData <- readFile49FN("originData.csv")
}else if (class(originData)!="data.frame"){
originData <- readFile49FN("originData.csv")
}
},error=function(e){
print("載入檔案失敗，請檢察step01ReadFileFN()")
})
setwd("c:/opt/Dropbox/GitHub/lottery/")
tryCatch({
if(!exists("originData")){
originData <- readFile49FN("originData.csv")
}else if (class(originData)!="data.frame"){
originData <- readFile49FN("originData.csv")
}
},error=function(e){
print("載入檔案失敗，請檢察step01ReadFileFN()")
})
tryCatch({
countMX49 <- countMX49FN()
print("生成計數矩陣完成")
},error=function(e){
print("生成計數矩陣失敗，請檢察countMX49FN()")
})
tryCatch({
itemMatrix49 <- itemMatrix49FN()
print("生成同現矩陣完成")
},error=function(e){
print("生成同現矩陣失敗，請檢察cooccurrenceMatrix49FN()")
})
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_4 <- historyRecordFN49(examineResult = temp3_3[,1])
temp3_5 <- historyRecordCombo3FN49(examineResult = temp3_3[,1],historyRecord = temp3_4 )
tryCatch({
pbDistributionMX49 <- pbDistributionMX49FN()
print("生成機率分布矩陣完成")
},error=function(e){
print("生成機率分布矩陣失敗，請檢察pbDistributionMX49FN()")
})
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_4 <- historyRecordFN49(examineResult = temp3_3[,1])
temp3_5 <- historyRecordCombo3FN49(examineResult = temp3_3[,1],historyRecord = temp3_4 )
View(temp3_3)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_4 <- historyRecordFN49(examineResult = temp3_3[,1])
temp3_5 <- historyRecordCombo3FN49(examineResult = temp3_3[,1],historyRecord = temp3_4 )
View(temp3_3)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
View(temp3_3)
temp3_1 <- partialMatrix49FN(chooseBall49FN(c(2,3,4,5)))
temp3_2 <- recommendMatrix49FN(recommendMatrix = temp3_1 )
temp3_3 <- recommendResultFN49(recommendResult = temp3_2,score=105)
View(temp3_3)
